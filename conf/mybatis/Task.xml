<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="Task">

	<resultMap id="taskResultMap" type="com.aztask.vo.Task">
		<id property="task_id" column="task_id" />
		<result property="task_desc" column="task_desc" />
		<result property="task_categories" column="task_categories" />
		<result property="user_id" column="user_id" />
		<result property="latitude" column="latitude" />
		<result property="longitude" column="longitude" />
		<result property="device_id" column="device_id" />
	</resultMap>

	<resultMap id="assignedTaskResultMap" type="com.aztask.vo.AssignedTask">
		<id property="id" column="id" />
		<result property="assignorId" column="task_assignor_id" />
		<result property="assigneeId" column="task_assignee_id" />
		<result property="taskId" column="task_id" />
		<result property="taskStatus" column="task_status" />
	</resultMap>
	
	<select id="newTasks" resultType="com.aztask.vo.Task">
		<!-- This query won't be returning entire list of tasks from table
			 in fact, there would be a condition to decide number of new tasks to be returned
			 like, all the tasks created in last 5 mins.  -->
		select * from t_task limit 10
	</select>


	<select id="featuredTasks" resultType="com.aztask.vo.Task">
		<!-- This query won't be returning entire list of tasks from table
			 in fact, there would be a condition to decide number of new tasks to be returned
			 like, all the tasks created in last 5 mins.  -->
		select * from t_task limit 10
	</select>

   <select id="nearByTasks" resultType="com.aztask.vo.Task">
	
<!-- 	<![CDATA[ SELECT * FROM ( SELECT task_id,task_desc,(6371 * acos (cos ( RADIANS(cast(${latitude} as double precision)) ) * cos( RADIANS(tul.latitude ) ) *  -->
<!-- 	 		cos( RADIANS(tul.longitude ) - RADIANS(cast(${latitude} as double precision))) )+sin ( RADIANS(cast(${latitude} as double precision))) ) * sin( RADIANS(tul.latitude) ))) AS distance -->
<!-- 	  		FROM t_task tul ) as t where distance < 1 order by distance  ]]> -->
	  		
	  		
	 <![CDATA[ select * from (SELECT task_id,task_desc,(6371 * acos (cos ( radians(cast(${latitude} as double precision)) ) * cos( radians(cast(tul.latitude as double precision) ) ) * 
	 		cos( radians(cast(tul.longitude as double precision) ) - radians(cast(${latitude} as double precision)) )+sin ( radians(cast(${latitude} as double precision)) ) * sin( radians(cast(tul.latitude as double precision)) ))) AS distance
	  		FROM t_task tul) as t where distance < 1 order by distance ]]>
	  		
	</select>

	<select id="allTasksOfUser" parameterType="int" resultType="com.aztask.vo.Task">
		select * from t_task where user_id=#{id}
	</select>

	<select id="pendingTasksOfUser" parameterType="int" resultType="com.aztask.vo.Task">
		select * from t_task where user_id=#{id}
	</select>

	<select id="acceptedTasksOfUser" parameterType="int" resultType="com.aztask.vo.Task">
		select * from t_task where user_id=#{id}
	</select>


	<select id="getTaskById" resultType="com.aztask.vo.Task">
		select * from t_task where task_id = #{id}
	</select>

	<select id="tasksByCategories" resultType="com.aztask.vo.Task">
		select * from t_task where (${task_categories})
	</select>


	<insert id="saveTask" parameterType="com.aztask.vo.Task" useGeneratedKeys="true"
		keyProperty="task_id" keyColumn="task_id">
		INSERT INTO t_task
		(task_desc,
		task_categories,
		user_id,
		latitude,
		longitude,
		device_id,
		task_time)
		VALUES
		(#{task_desc},#{task_categories},#{user_id},#{latitude},#{longitude},#{device_id},#{task_time});
	</insert>
	
	<delete id="deleteTask">
		delete from t_task where task_id=${taskId} and user_id=${userId}
	</delete>
	

	<insert id="assignTask" parameterType="com.aztask.vo.AssignedTask" useGeneratedKeys="true"
		keyProperty="id" keyColumn="id">
		INSERT INTO t_assigned_tasks
		(task_assignor_id,
		task_id,
		task_assignee_id,
		task_status)
		VALUES
		(#{assignorId},#{taskId},#{assigneeId},#{taskStatus});
	</insert>


	<select id="getAssignedTask" resultType="com.aztask.vo.AssignedTask">
		select * from t_assigned_tasks where task_id=${task_id} and task_assignee_id=${task_assignee_id};
	</select>

 	<update id="updateAssignedTask">
 		update t_assigned_tasks	set task_status=#{taskStatus} where id=#{id}
 	</update>
	
</mapper>



